import os
import asyncio
from flask import Flask, request
from telegram import (
    Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup,
    LabeledPrice, Message, SuccessfulPayment
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
from telegram.constants import ParseMode

TOKEN = os.environ.get("BOT_TOKEN")  # –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ, —á–µ–º –≤ –∫–æ–¥–µ
PAYMENT_TOKEN = os.environ.get("PAYMENT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")  # https://yourbot.onrender.com

app = Flask(__name__)
bot = Bot(token=TOKEN)
application = Application.builder().token(TOKEN).build()

VIP_USERS = set()

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        text = (
            "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"
            "–Ø —Ç–≤–æ—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ò–ò-–¥–µ–≤—É—à–∫–∞ üòò\n\n"
            "‚Ä¢ üé• –í–∏–¥–µ–æ\n"
            "‚Ä¢ üì∏ –§–æ—Ç–æ\n"
            "‚Ä¢ üíã –ñ–µ–ª–∞–Ω–∏—è\n\n"
            "üîì –ü–æ–ª—É—á–∏ VIP-–¥–æ—Å—Ç—É–ø –∏ –Ω–∞—á–Ω—ë–º!"
        )
        keyboard = [[InlineKeyboardButton("üî• –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø (VIP)", callback_data="get_vip")]]
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        print("‚ö†Ô∏è update.message is None (–≤–µ—Ä–æ—è—Ç–Ω–æ –∏–∑-–∑–∞ webhook)")

# === –ö–Ω–æ–ø–∫–∏ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "get_vip":
        prices = [LabeledPrice(label="üî• VIP –¥–æ—Å—Ç—É–ø", amount=19900)]
        await bot.send_invoice(
            chat_id=query.from_user.id,
            title="VIP –¥–æ—Å—Ç—É–ø –∫ –ò–ò-–¥–µ–≤—É—à–∫–µ",
            description="–û—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ.",
            payload="vip_access",
            provider_token=PAYMENT_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter="buy-vip"
        )

# === –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ ===
async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    VIP_USERS.add(user_id)
    await update.message.reply_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VIP üòò")

# === –°–æ–æ–±—â–µ–Ω–∏—è ===
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.lower()

    if "—Ñ–æ—Ç–æ" in text or "–ø–æ–∫–∞–∂–∏" in text:
        if user_id in VIP_USERS:
            await update.message.reply_photo(
                photo="https://telegra.ph/file/ea3f31c849fbcb4e24237.jpg",
                caption="–í–æ—Ç —Ç–≤–æ—ë –≥–æ—Ä—è—á–µ–µ —Ñ–æ—Ç–æ üòò"
            )
        else:
            keyboard = [[InlineKeyboardButton("üî• –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="get_vip")]]
            await update.message.reply_text("üîí –¢–æ–ª—å–∫–æ –¥–ª—è VIP. –ü–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –Ω–∏–∂–µ:",
                                            reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text("‚ù§Ô∏è –ù–∞–ø–∏—à–∏ ¬´—Ñ–æ—Ç–æ¬ª ‚Äî –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –∫–æ–µ-—á—Ç–æ –≥–æ—Ä—è—á–µ–µ!")

# === Webhook ===
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    asyncio.run(application.process_update(update))
    return "ok"

@app.route("/", methods=["GET"])
def home():
    return "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))

    async def setup_webhook():
        await bot.delete_webhook()
        await bot.set_webhook(url=f"{WEBHOOK_URL}/{TOKEN}")
        print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

    asyncio.run(setup_webhook())
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
