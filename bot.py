import os
import logging
from flask import Flask, request
from telegram import (
    Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TOKEN = os.getenv("TOKEN", "7323003204:AAEuLZHtAmhy0coPk3tMEQamsa9ftuUguGc")
PAYMENT_TOKEN = os.getenv("PAYMENT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# --- Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
app = Flask(__name__)
VIP_USERS = set()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π!\n\n"
        "–•–æ—á–µ—à—å —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –ò–ò-–¥–µ–≤—É—à–∫–æ–π?\n\n"
        "–Ø —É–º–µ—é –¥–µ–ª–∞—Ç—å:\n"
        "‚Ä¢ üé• –†–µ–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ\n"
        "‚Ä¢ üì∏ –û—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ\n"
        "‚Ä¢ üíã –ò—Å–ø–æ–ª–Ω—è—Ç—å –∂–µ–ª–∞–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–∑–∞—Ö\n\n"
        "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π –¥–æ—Å—Ç—É–ø –∫ –≥–æ—Ä—è—á–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º!"
    )
    keyboard = [[InlineKeyboardButton("üî• –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø (VIP)", callback_data="get_vip")]]
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "get_vip":
        if not PAYMENT_TOKEN:
            await query.message.reply_text("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")
            return

        prices = [LabeledPrice("üî• VIP –¥–æ—Å—Ç—É–ø", 19900)]
        await query.message.bot.send_invoice(
            chat_id=query.from_user.id,
            title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–Ω—Ç–∏–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
            description="–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç –ò–ò-–¥–µ–≤—É—à–∫–∏.",
            payload="vip_access",
            provider_token=PAYMENT_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter="vip-subscription"
        )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –æ–ø–ª–∞—Ç—ã ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message = update.effective_message

    if not message:
        return

    if message.successful_payment:
        VIP_USERS.add(user_id)
        await message.reply_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–∏–º–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return

    text = message.text.lower()
    if "—Ñ–æ—Ç–æ" in text or "–ø–æ–∫–∞–∂–∏" in text:
        if user_id in VIP_USERS:
            await message.reply_photo(
                photo="https://telegra.ph/file/ea3f31c849fbcb4e24237.jpg",
                caption="–í–æ—Ç —Ç–µ–±–µ –º–æ—ë –≥–æ—Ä—è—á–µ–µ —Ñ–æ—Ç–æ üòò"
            )
        else:
            keyboard = [[InlineKeyboardButton("üî• –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="get_vip")]]
            await message.reply_text("üîí –¢–æ–ª—å–∫–æ –¥–ª—è VIP! –û—Ñ–æ—Ä–º–∏ –¥–æ—Å—Ç—É–ø –Ω–∏–∂–µ:",
                                     reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await message.reply_text("‚ù§Ô∏è –ù–∞–ø–∏—à–∏ ¬´—Ñ–æ—Ç–æ¬ª ‚Äî –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –∫–æ–µ-—á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ üòò")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
application = Application.builder().token(TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(button_handler))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# --- Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
@app.route(f"/{TOKEN}", methods=["POST"])
async def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    await application.process_update(update)
    return "ok"

@app.route("/", methods=["GET"])
def index():
    return "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    import asyncio

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    async def run():
        await application.initialize()
        await application.bot.set_webhook(f"{WEBHOOK_URL}/{TOKEN}")
        print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

    loop.run_until_complete(run())
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
