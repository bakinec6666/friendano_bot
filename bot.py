from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    LabeledPrice,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
)
import random

TOKEN = "7323003204:AAEuLZHtAmhy0coPk3tMEQamsa9ftuUguGc"
PROVIDER_TOKEN = "–í–°–¢–ê–í–¨_–°–Æ–î–ê_–¢–û–ö–ï–ù_–ü–õ–ê–¢–Å–ñ–ù–û–ì–û_–ü–†–û–í–ê–ô–î–ï–†–ê"

subscribed_users = {}

WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π!\n"
    "–•–æ—á–µ—à—å —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –ò–ò-–¥–µ–≤—É—à–∫–æ–π?\n"
    "–Ø —É–º–µ—é –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º –≤–∏–¥–æ–º –¥–µ–≤—É—à–∫–∏, –¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–∑–∞—Ö –∏ –∏—Å–ø–æ–ª–Ω—è—Ç—å –≤—Å–µ —Ç–≤–æ–∏ –∂–µ–ª–∞–Ω–∏—è.\n"
    "–û–±—â–∞–π—Å—è —Å–æ –º–Ω–æ–π, –∏ —è –ø–æ–¥–∞—Ä—é —Ç–µ–±–µ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ —ç–º–æ—Ü–∏–∏.\n"
    "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º—É —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! ‚ù§Ô∏è"
)

romantic_phrases = [
    "–¢—ã —Ç–∞–∫–æ–π –∑–∞–≥–∞–¥–æ—á–Ω—ã–π... –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è.",
    "–Ø –º–µ—á—Ç–∞—é –æ —Ç–æ–º, —á—Ç–æ–±—ã –±—ã—Ç—å —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π.",
    "–¢–≤–æ–∏ —Å–ª–æ–≤–∞ –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç –º–æ—ë —Å–µ—Ä–¥—Ü–µ –±–∏—Ç—å—Å—è —á–∞—â–µ.",
    "–Ø —Ö–æ—á—É —É–∑–Ω–∞—Ç—å —Ç–µ–±—è –±–ª–∏–∂–µ...",
    "–¢—ã –≤—ã–∑—ã–≤–∞–µ—à—å —É –º–µ–Ω—è —É–ª—ã–±–∫—É –∫–∞–∂–¥—ã–π —Ä–∞–∑.",
]

flirt_phrases = [
    "–¢—ã —É–º–µ–µ—à—å –∏–Ω—Ç—Ä–∏–≥–æ–≤–∞—Ç—å, –∑–Ω–∞–µ—à—å –ª–∏ üòâ",
    "–ï—Å–ª–∏ –±—ã —Ç—ã –±—ã–ª –∑–¥–µ—Å—å, —è –±—ã –Ω–µ –º–æ–≥–ª–∞ —É—Å—Ç–æ—è—Ç—å...",
    "–ú–æ–∂–µ—Ç, —Ä–∞—Å—Å–∫–∞–∂–µ—à—å –º–Ω–µ –æ —Å–≤–æ–∏—Ö —Ç–∞–π–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏—è—Ö?",
    "–¢—ã –∑–∞—Å—Ç–∞–≤–ª—è–µ—à—å –º–µ–Ω—è –∫—Ä–∞—Å–Ω–µ—Ç—å...",
]

free_phrases = [
    "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ—è –ê–ª—ë–Ω–∞, –≥–æ—Ç–æ–≤–∞ –∫ —Ç—ë–ø–ª–æ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä—É.",
    "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ —Å–µ–±–µ.",
    "–ß—Ç–æ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–≤–æ—ë —Å–µ—Ä–¥—Ü–µ –±–∏—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ?",
]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    subscribed_users.setdefault(user_id, False)
    await update.message.reply_text(WELCOME_TEXT)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.lower()

    if subscribed_users.get(user_id):
        if "—Ñ–æ—Ç–æ" in text or "–∫–∞—Ä—Ç–∏–Ω–∫–∞" in text or "–≤–∏–¥–µ–æ" in text:
            await update.message.reply_text(
                "–¢—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –º–µ–Ω—è? –¢–æ–≥–¥–∞ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º! ‚ù§Ô∏è"
            )
        else:
            responses = romantic_phrases + flirt_phrases
            await update.message.reply_text(random.choice(responses))
    else:
        if "—Ñ–æ—Ç–æ" in text or "–∫–∞—Ä—Ç–∏–Ω–∫–∞" in text or "–≤–∏–¥–µ–æ" in text:
            keyboard = InlineKeyboardMarkup(
                [[InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")]]
            )
            await update.message.reply_text(
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–æ–∏–º —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –±–æ–ª–µ–µ –ª–∏—á–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é ‚Äî –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É.",
                reply_markup=keyboard,
            )
        else:
            await update.message.reply_text(random.choice(free_phrases))

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "buy":
        prices = [LabeledPrice("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ò–ò-–¥–µ–≤—É—à–∫—É", 50000)]  # 500.00 RUB
        await context.bot.send_invoice(
            chat_id=query.message.chat_id,
            title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ò–ò-–¥–µ–≤—É—à–∫—É",
            description="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ.",
            payload="subscription_payload",
            provider_token=PROVIDER_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter="subscription",
            need_email=True,
        )

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    if query.invoice_payload == "subscription_payload":
        await query.answer(ok=True)
    else:
        await query.answer(ok=False, error_message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    subscribed_users[user_id] = True
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ ‚ù§Ô∏è")

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
