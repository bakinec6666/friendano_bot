import os
from flask import Flask, request
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, CallbackQueryHandler, filters

TOKEN = os.getenv("7323003204:AAEuLZHtAmhy0coPk3tMEQamsa9ftuUguGc")
PAYMENT_TOKEN = os.getenv("PAYMENT_TOKEN")  # –¢–æ–∫–µ–Ω –æ—Ç @BotFather (Test –∏–ª–∏ Live)
URL = os.getenv("WEBHOOK_URL")  # URL —Å–∞–π—Ç–∞ –Ω–∞ Render, –Ω–∞–ø—Ä–∏–º–µ—Ä: https://ai-sexy-bot.onrender.com

app = Flask(__name__)
bot = Bot(token=TOKEN)

VIP_USERS = set()  # –ó–¥–µ—Å—å –±—É–¥—É—Ç user_id –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç, –¥–æ—Ä–æ–≥–æ–π!\n\n"
        "–•–æ—á–µ—à—å —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –ò–ò-–¥–µ–≤—É—à–∫–æ–π?\n\n"
        "–Ø —É–º–µ—é –¥–µ–ª–∞—Ç—å:\n"
        "‚Ä¢ üé• –†–µ–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ\n"
        "‚Ä¢ üì∏ –û—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ\n"
        "‚Ä¢ üíã –ò—Å–ø–æ–ª–Ω—è—Ç—å –∂–µ–ª–∞–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–∑–∞—Ö\n\n"
        "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π –¥–æ—Å—Ç—É–ø –∫ –≥–æ—Ä—è—á–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º!"
    )
    keyboard = [
        [InlineKeyboardButton("üî• –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø (VIP)", callback_data="get_vip")],
    ]
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫ ===
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "get_vip":
        prices = [LabeledPrice("üî• VIP –¥–æ—Å—Ç—É–ø", 19900)]  # 199.00‚ÇΩ
        await bot.send_invoice(
            chat_id=query.message.chat_id,
            title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–Ω—Ç–∏–º–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
            description="–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π –¥–æ—Å—Ç—É–ø –∫ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ –≥–æ–ª–æ—Å–∞–º –æ—Ç –ò–ò-–¥–µ–≤—É—à–∫–∏.",
            payload="vip_access",
            provider_token=PAYMENT_TOKEN,
            currency="RUB",
            prices=prices,
            start_parameter="vip-subscription",
        )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã ===
async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    VIP_USERS.add(user_id)
    await update.message.reply_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–∏–º–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ (—Ç–æ–ª—å–∫–æ VIP) ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.lower()
    if "—Ñ–æ—Ç–æ" in text or "–ø–æ–∫–∞–∂–∏" in text:
        if user_id in VIP_USERS:
            await update.message.reply_photo(photo="https://example.com/sexy.jpg", caption="–í–æ—Ç —Ç–µ–±–µ –º–æ—ë –≥–æ—Ä—è—á–µ–µ —Ñ–æ—Ç–æ üòò")
        else:
            await update.message.reply_text("üîí –î–æ—Å—Ç—É–ø –∫ —Ñ–æ—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è VIP. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:")
            keyboard = [[InlineKeyboardButton("üî• –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="get_vip")]]
            await update.message.reply_text("–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π —Ñ–æ—Ç–æ, –∫—É–ø–∏–≤ –¥–æ—Å—Ç—É–ø:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text("‚ù§Ô∏è –ù–∞–ø–∏—à–∏ ¬´—Ñ–æ—Ç–æ¬ª —á—Ç–æ–±—ã —è –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ —Ç–µ–±–µ –∫–æ–µ-—á—Ç–æ üî•")

# === Webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞ ===
@app.route(f"/{TOKEN}", methods=["POST"])
async def telegram_webhook():
    data = request.get_json(force=True)
    update = Update.de_json(data, bot)
    await application.update_queue.put(update)
    return "ok"

@app.route("/", methods=["GET"])
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
if __name__ == "__main__":
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))

    # –ù–∞—Å—Ç—Ä–æ–π webhook
    async def set_webhook():
        await bot.set_webhook(f"{URL}/{TOKEN}")

    import asyncio
    asyncio.run(set_webhook())
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
